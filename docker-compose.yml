services:
  flask_app:
    build: .
    image: guyyagil/flask_app:latest
    container_name: flask_app
    ports:
      - "5000:5000"
    env_file:
      - .env
    volumes:
      - ./app:/app
    depends_on:
      ollama:
        condition: service_healthy
      chromadb:
        condition: service_started
      mongodb:
        condition: service_started
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ./modelfile:/modelfile
      - ./ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_CONTEXT_LENGTH=2048
      - OLLAMA_ENABLE_EMBEDDINGS=true
    # optional healthcheck so other services wait until Ollama is ready
    healthcheck:
      test: ["CMD-SHELL", "ollama list"]
      interval: 10s
      timeout: 5s
      retries: 5
    # pull and create models, then start Ollama server
    entrypoint:
      - sh
      - -c
      - |
        set -e
        ollama serve &
        pid=$$!
        echo "Starting Ollama server..."
        until ollama list > /dev/null 2>&1; do
          echo "Ollama server not ready yet, waiting..."
          sleep 1
        done
        echo "Ollama server is ready!"
        
        # Pull embedding model if not already present
        if ! ollama list | grep -q "nomic-embed-text"; then
          echo "Pulling nomic-embed-text model (this may take several minutes)..."
          ollama pull nomic-embed-text
          echo "nomic-embed-text model downloaded successfully!"
        else
          echo "nomic-embed-text model already exists"
        fi
        
        # Create custom model if not already present
        if ! ollama list | grep -q "my-custom-model"; then
          echo "Creating my-custom-model from Modelfile..."
          ollama create my-custom-model -f /modelfile/Modelfile
          echo "my-custom-model created successfully!"
        else
          echo "my-custom-model already exists"
        fi
        
        echo "All models ready. Ollama server running and accepting connections."
        wait $$pid

  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb
    ports:
      - "8000:8000"
    volumes:
      - ./chroma_data:/chroma/.chroma/index       

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb